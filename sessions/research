let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
imap <D-BS> 
imap <M-BS> 
imap <M-Down> }
inoremap <D-Down> <C-End>
imap <M-Up> {
inoremap <D-Up> <C-Home>
noremap! <M-Right> <C-Right>
noremap! <D-Right> <End>
noremap! <M-Left> <C-Left>
noremap! <D-Left> <Home>
inoremap <silent> <S-Tab> =BackwardsSnippet()
imap <F1> 
imap <Nul> :
map! <D-v> *
nnoremap <silent>  
nmap <silent> - :call AccordionMode()
nmap <silent> l l:call AccordionMode()
nmap <silent> h h:call AccordionMode()
nmap <silent> k k:call AccordionMode()
nmap <silent> j j:call AccordionMode()
nmap P :call SectionHeadNav(-1, 1)
nmap p :call SectionHeadNav(-1, 0)
nmap N :call SectionHeadNav(1, 1)
nmap n :call SectionHeadNav(1, 0)
snoremap <silent> 	 i<Right>=TriggerSnippet()
nnoremap <silent>  :call Reset() | nohls
snoremap  b<BS>
nmap <silent>  :call AddOrUpdateTimestamp("")
snoremap % b<BS>%
snoremap ' b<BS>'
nnoremap // q/
nnoremap :: q:
nmap :W :w
nnoremap ?? q?
nmap <silent> K :e:$
map Q gq
xmap S <Plug>VSurround
snoremap U b<BS>U
vmap [% [%m'gv``
snoremap \ b<BS>\
map <silent> \w\t <Plug>VimwikiTabMakeDiaryNote
map <silent> \w\w <Plug>VimwikiMakeDiaryNote
map <silent> \ws <Plug>VimwikiUISelect
map <silent> \wt <Plug>VimwikiTabGoHome
map <silent> \ww <Plug>VimwikiGoHome
nmap \cv <Plug>VCSVimDiff
nmap \cu <Plug>VCSUpdate
nmap \cU <Plug>VCSUnlock
nmap \cs <Plug>VCSStatus
nmap \cr <Plug>VCSReview
nmap \cq <Plug>VCSRevert
nmap \cl <Plug>VCSLog
nmap \cL <Plug>VCSLock
nmap \ci <Plug>VCSInfo
nmap \cg <Plug>VCSGotoOriginal
nmap \cd <Plug>VCSDiff
nmap \cD <Plug>VCSDelete
nmap \cc <Plug>VCSCommit
nmap \cG <Plug>VCSClearAndGotoOriginal
nmap \cn <Plug>VCSAnnotate
nmap \ca <Plug>VCSAdd
map \dk <Plug>DirDiffPrev
map \dj <Plug>DirDiffNext
map \dp <Plug>DirDiffPut
map \dg <Plug>DirDiffGet
map <silent> \w2 :w:VimwikiAll2HTML:echo "Saved wiki to HTML."
map <silent> \snip :call ResetSnippets() | call GetSnippets(g:snippets_dir, "_") | call GetSnippets(g:snippets_dir, &ft):echo "Snippets for format \"" . &ft . "\" updated."
nmap <silent> \ll o:call Timestamp("short") | call FoldWrap()
nmap <silent> \fi :call FoldInsert()
nmap <silent> \fw :call FoldWrap()
nmap <silent> \sl :call Timestamp("long")
nmap <silent> \sd :call Timestamp("date")
nmap <silent> \st :call AddOrUpdateTimestamp(" MARK")
nmap \po :Help
nmap \pp :help:winc _:winc |:help 
nmap \hw :help:silent call AdjustFont(-4):set columns=115 lines=999:winc _:winc |:help 
nmap \_ Bi<em>ea</em>
nmap <silent> \q :call FormatSqlStatement()
nmap <silent> \t :call HandleTS()
nmap <silent> \/ :call HandleURI()
nmap <silent> \c :call ScratchBuffer("scratch")
nmap <silent> \0 :silent normal zvzt
nmap <silent> \= :call FoldDefaultNodes():normal zvzkzjzt
nmap <silent> \] :NERDTreeToggle
nmap \j :call JournalEntry()
nmap \\ :call CommitSession()
nmap <silent> \w :!wc -w %
vmap ]% ]%m'gv``
snoremap ^ b<BS>^
snoremap ` b<BS>`
vmap a% [%v]%
nmap cs <Plug>Csurround
nmap ds <Plug>Dsurround
nmap gx <Plug>NetrwBrowseX
xmap s <Plug>Vsurround
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
nnoremap <C-Down> :silent! :call AdjustFont(-1)
nnoremap <C-Up> :silent! :call AdjustFont(1)
nnoremap <silent> <C-Right> gt
nnoremap <silent> <C-Left> gT
nmap <silent> <D-w> :bd
nmap <silent> <D-t> :101tabnew
map <M-Down> }
noremap <D-Down> <C-End>
map <M-Up> {
noremap <D-Up> <C-Home>
noremap <M-Right> <C-Right>
noremap <D-Right> <End>
noremap <M-Left> <C-Left>
noremap <D-Left> <Home>
snoremap <Left> bi
snoremap <Right> a
snoremap <BS> b<BS>
snoremap <silent> <S-Tab> i<Right>=BackwardsSnippet()
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
nnoremap <silent> <Plug>CVSWatchRemove :CVSWatch remove
nnoremap <silent> <Plug>CVSWatchOn :CVSWatch on
nnoremap <silent> <Plug>CVSWatchOff :CVSWatch off
nnoremap <silent> <Plug>CVSWatchAdd :CVSWatch add
nnoremap <silent> <Plug>CVSWatchers :CVSWatchers
nnoremap <silent> <Plug>CVSUnedit :CVSUnedit
nnoremap <silent> <Plug>CVSEditors :CVSEditors
nnoremap <silent> <Plug>CVSEdit :CVSEdit
nnoremap <silent> <Plug>VCSVimDiff :VCSVimDiff
nnoremap <silent> <Plug>VCSUpdate :VCSUpdate
nnoremap <silent> <Plug>VCSUnlock :VCSUnlock
nnoremap <silent> <Plug>VCSStatus :VCSStatus
nnoremap <silent> <Plug>VCSReview :VCSReview
nnoremap <silent> <Plug>VCSRevert :VCSRevert
nnoremap <silent> <Plug>VCSLog :VCSLog
nnoremap <silent> <Plug>VCSLock :VCSLock
nnoremap <silent> <Plug>VCSInfo :VCSInfo
nnoremap <silent> <Plug>VCSClearAndGotoOriginal :VCSGotoOriginal!
nnoremap <silent> <Plug>VCSGotoOriginal :VCSGotoOriginal
nnoremap <silent> <Plug>VCSDiff :VCSDiff
nnoremap <silent> <Plug>VCSDelete :VCSDelete
nnoremap <silent> <Plug>VCSCommit :VCSCommit
nnoremap <silent> <Plug>VCSAnnotate :VCSAnnotate
nnoremap <silent> <Plug>VCSAdd :VCSAdd
map <M-F3> :call CSV_clear_all()  
map <S-F3> :call CSV_toggle_field(CSV_get_field(0))
map <S-F5> :call CSV_goto_highlighted(-1)
map <S-F6> :call CSV_goto_highlighted(1)
map <C-F5> :call CSV_goto_field()
map <C-F6> :call CSV_get_new_sep()
map <silent> <C-S-Tab> :BufExplorerk
map <silent> <C-Tab> :BufExplorerj
nmap <Down> :echo "You should have typed j instead."
nmap <Up> :echo "You should have typed k instead."
nmap <Right> :echo "You should have typed l instead."
nmap <Left> :echo "You should have typed h instead."
nmap <S-Space> 
map <F1> 
nnoremap <Nul> :
xmap <BS> "-d
vmap <D-x> "*d
vmap <D-c> "*y
vmap <D-v> "-d"*P
nmap <D-v> "*P
imap S <Plug>ISurround
imap s <Plug>Isurround
inoremap <silent> 	 =TriggerSnippet()
imap <silent>  :call Reset() | nohlsa
imap  :set completeopt+=menuonea
inoremap <silent> 	 =ShowAvailableSnips()
imap  <Plug>Isurround
inoremap <silent>  
let &cpo=s:cpo_save
unlet s:cpo_save
set autowrite
set background=dark
set backspace=indent,eol,start
set clipboard=unnamed
set commentstring=
set diffopt=filler,vertical
set directory=~/.vim/swap//,~/vimfiles/swap//
set fileencodings=ucs-bom,utf-8,default,latin1
set foldlevelstart=999
set fuoptions=maxhorz,maxvert
set guifont=Inconsolata:h11
set guioptions=egmrLt
set guitablabel=%m\ %N\ %t\ %r
set helplang=en
set history=10000
set hlsearch
set incsearch
set indentkeys=0{,0},:,0#,!^F,O,e
set iskeyword=@,48-57,_,192-255,-
set langmenu=none
set laststatus=2
set listchars=tab:>-,trail:-
set mouse=a
set printexpr=system('open\ -a\ Preview\ '.v:fname_in)\ +\ v:shell_error
set ruler
set sessionoptions=folds,help,options,tabpages,winsize,globals,sesdir,resize,winpos,unix
set shiftwidth=4
set shortmess=filnxtToOIA
set showbreak=\ \ 
set showcmd
set spellcapcheck=off
set splitbelow
set splitright
set statusline=%<(%n)\ %m%y%r\ %f\ %=%-14.(%l,%c%V%)\ %P
set switchbuf=useopen,usetab
set tabline=%!MyTabLine()
set tabpagemax=100
set tabstop=2
set tags=./tags,tags,~/sandbox/personal/tags
set termencoding=utf-8
set transparency=5
set undolevels=100
set window=82
set winminheight=0
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
let NERDTreeMapPreviewSplit = "gi"
let NERDTreeMapCloseChildren = "X"
let NERDTreeShowHidden = "0"
let TailMinusF_Loaded =  1 
let NERDTreeMapCloseDir = "x"
let NERDTreeShowLineNumbers = "0"
let DirDiffSort =  1 
let NERDTreeBookmarksFile = "/Users/seth/.NERDTreeBookmarks"
let NERDTreeMapToggleHidden = "I"
let NERDTreeWinSize = "31"
let DirDiffInteractive =  0 
let NERDTreeMapPreview = "go"
let NERDTreeMapActivateNode = "o"
let NERDTreeWinPos = "left"
let DirDiffAddArgs = ""
let NERDTreeStatusline = "%{b:NERDTreeRoot.path.strForOS(0)}"
let NERDTreeMapOpenInTabSilent = "T"
let NERDTreeMapHelp = "?"
let NERDTreeMapJumpParent = "p"
let NERDTreeMapToggleFilters = "f"
let NERDTreeMapJumpLastChild = "J"
let NERDTreeMapJumpPrevSibling = "<C-k>"
let NERDTreeShowBookmarks = "0"
let NERDTreeMapOpenExpl = "e"
let NERDTreeRemoveDirCmd = "rm -rf "
let CSV_string_delimiter = "\""
let NERDTreeMouseMode = "1"
let NERDTreeChDirMode = "0"
let NERDTreeAutoCenterThreshold = "3"
let NERDTreeShowFiles = "1"
let NERDTreeMapOpenSplit = "i"
let DirDiffTextFiles = "Files "
let NERDTreeCaseSensitiveSort = "0"
let NERDTreeHijackNetrw = "1"
let NERDTreeMapFilesystemMenu = "m"
let NERDTreeMapRefresh = "r"
let TailMinusF_Height =  10 
let NERDTreeHighlightCursorline = "1"
let CSV_field_list = ""
let NERDTreeMapOpenInTab = "t"
let CSV_separator = ","
let DirDiffExcludes = ""
let DirDiffDynamicDiffText =  0 
let NERDTreeMapPreviewVSplit = "gs"
let NERDChristmasTree = "1"
let NERDTreeNotificationThreshold = "100"
let CSV_mono =  0 
let DirDiffTextDiffer = " differ"
let BufExplorer_title = "[Buf List]"
let NERDTreeMapChdir = "cd"
let DirDiffWindowSize =  14 
let NERDTreeMapExecute = "!"
let NERDTreeMapRefreshRoot = "R"
let NERDTreeAutoCenter = "1"
let DirDiffTextOnlyIn = "Only in "
let TailMinusF_Center_Win =  0 
let DirDiffTextAnd = " and "
let NERDTreeMapOpenVSplit = "s"
let NERDTreeMapDeleteBookmark = "D"
let AutoHiVersion = "0.2"
let NERDTreeMapJumpNextSibling = "<C-j>"
let DirDiffIgnoreCase =  0 
let NERDTreeMapJumpRoot = "P"
let NERDTreeCopyCmd = "cp -r "
let NERDTreeMapQuit = "q"
let NERDTreeMapChangeRoot = "C"
let NERDTreeSortDirs = "1"
let NERDTreeMapToggleFiles = "F"
let DirDiffIgnore = ""
let BufExploreAdd =  1 
let NERDTreeMapJumpFirstChild = "K"
let NERDTreeMapOpenRecursively = "O"
let NERDTreeMapToggleBookmarks = "B"
let NERDTreeMapUpdir = "u"
let NERDTreeMapUpdirKeepOpen = "U"
let NERDTreeQuitOnOpen = "0"
silent only
exe "cd " . escape(expand("<sfile>:p:h"), ' ')
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +0 ~/sandbox/personal/todo/research.tst.txt
silent! argdel *
set lines=83 columns=115
winpos 0 1028
edit ~/sandbox/personal/todo/research.tst.txt
set splitbelow splitright
wincmd _ | wincmd |
split
1wincmd k
wincmd w
wincmd t
set winheight=1 winwidth=1
exe '1resize ' . ((&lines * 40 + 41) / 83)
exe '2resize ' . ((&lines * 40 + 41) / 83)
argglobal
let s:cpo_save=&cpo
set cpo&vim
nmap <buffer> <NL> ddp
nmap <buffer>  ddkP
nmap <buffer> :w :exec ":echo 'Taskstack buffers auto save when you switch away. Use ZZ.'" | silent write
nmap <buffer> LL :silent! wincmd b | :silent! call FindNode("SCRATCH")ztzo]zk
nnoremap <buffer> NN :silent! wincmd t | normal ggzoo- a
nnoremap <buffer> QQ :silent! call InsertItem(getline("."), "o")
nnoremap <buffer> XX :silent! call InsertItem(getline("."), "x")
nnoremap <buffer> ZZ :maca hide:
imap <buffer> NN NN
imap <buffer> QQ QQ
imap <buffer> XX XX
imap <buffer> ZZ ZZ
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'tst.txt'
setlocal filetype=tst.txt
endif
set foldcolumn=4
setlocal foldcolumn=4
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
set foldmethod=marker
setlocal foldmethod=marker
setlocal foldminlines=1
setlocal foldnestmax=20
set foldtext=MyFoldText()
setlocal foldtext=MyFoldText()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,-
setlocal keywordprg=
set linebreak
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal nomacmeta
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=off
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'tst.txt'
setlocal syntax=tst.txt
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
set winfixheight
setlocal winfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
1
normal zo
let s:l = 2 - ((1 * winheight(0) + 20) / 40)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
2
normal! 0
wincmd w
argglobal
edit ~/sandbox/personal/todo/research.tst.txt
let s:cpo_save=&cpo
set cpo&vim
nmap <buffer> <NL> ddp
nmap <buffer>  ddkP
nmap <buffer> :w :exec ":echo 'Taskstack buffers auto save when you switch away. Use ZZ.'" | silent write
nmap <buffer> LL :silent! wincmd b | :silent! call FindNode("SCRATCH")ztzo]zk
nnoremap <buffer> NN :silent! wincmd t | normal ggzoo- a
nnoremap <buffer> QQ :silent! call InsertItem(getline("."), "o")
nnoremap <buffer> XX :silent! call InsertItem(getline("."), "x")
nnoremap <buffer> ZZ :maca hide:
imap <buffer> NN NN
imap <buffer> QQ QQ
imap <buffer> XX XX
imap <buffer> ZZ ZZ
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != 'tst.txt'
setlocal filetype=tst.txt
endif
set foldcolumn=4
setlocal foldcolumn=4
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
set foldmethod=marker
setlocal foldmethod=marker
setlocal foldminlines=1
setlocal foldnestmax=20
set foldtext=MyFoldText()
setlocal foldtext=MyFoldText()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,-
setlocal keywordprg=
set linebreak
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal nomacmeta
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=off
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'tst.txt'
setlocal syntax=tst.txt
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
70
normal zo
70
normal zo
let s:l = 132 - ((62 * winheight(0) + 20) / 40)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
132
normal! 0
wincmd w
exe '1resize ' . ((&lines * 40 + 41) / 83)
exe '2resize ' . ((&lines * 40 + 41) / 83)
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToOIA
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
