let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
imap <D-BS> 
imap <M-BS> 
imap <M-Down> }
inoremap <D-Down> <C-End>
imap <M-Up> {
inoremap <D-Up> <C-Home>
noremap! <M-Right> <C-Right>
noremap! <D-Right> <End>
noremap! <M-Left> <C-Left>
noremap! <D-Left> <Home>
inoremap <silent> <S-Tab> =BackwardsSnippet()
inoremap <silent> <Plug>NERDCommenterInInsert  <BS>:call NERDComment(0, "insert")
imap <F1> :Help
imap <Nul> :
map! <D-v> *
nnoremap <silent>  
nmap <silent> - :call AccordionMode()
nmap <silent> l l:call AccordionMode()
nmap <silent> h h:call AccordionMode()
nmap <silent> k k:call AccordionMode()
nmap <silent> j j:call AccordionMode()
nmap P :call SectionHeadNav(-1, 1)
nmap p :call SectionHeadNav(-1, 0)
nmap N :call SectionHeadNav(1, 1)
nmap n :call SectionHeadNav(1, 0)
nmap c :silent! lclose
nmap ? :call FunctionLocationIndex()
nmap / :call HeaderLocationIndex()
snoremap <silent> 	 i<Right>=TriggerSnippet()
nnoremap <silent>  :call Reset() | nohls
snoremap  b<BS>
nmap <silent>  :call RemoveTimestamp()
nmap <silent>  :call AddOrUpdateTimestampSolicitingAnnotation()
nmap <silent>  :call AddOrUpdateTimestamp("")
nmap <silent>  :call TimestampAutoUpdateToggle()
nmap  :call ReloadVimrc() | :echo "Resourced .vimrc."
snoremap % b<BS>%
snoremap ' b<BS>'
nmap ,ca <Plug>NERDCommenterAltDelims
vmap ,cA <Plug>NERDCommenterAppend
nmap ,cA <Plug>NERDCommenterAppend
vmap ,c$ <Plug>NERDCommenterToEOL
nmap ,c$ <Plug>NERDCommenterToEOL
vmap ,cu <Plug>NERDCommenterUncomment
nmap ,cu <Plug>NERDCommenterUncomment
vmap ,cn <Plug>NERDCommenterNest
nmap ,cn <Plug>NERDCommenterNest
vmap ,cb <Plug>NERDCommenterAlignBoth
nmap ,cb <Plug>NERDCommenterAlignBoth
vmap ,cl <Plug>NERDCommenterAlignLeft
nmap ,cl <Plug>NERDCommenterAlignLeft
vmap ,cy <Plug>NERDCommenterYank
nmap ,cy <Plug>NERDCommenterYank
vmap ,ci <Plug>NERDCommenterInvert
nmap ,ci <Plug>NERDCommenterInvert
vmap ,cs <Plug>NERDCommenterSexy
nmap ,cs <Plug>NERDCommenterSexy
vmap ,cm <Plug>NERDCommenterMinimal
nmap ,cm <Plug>NERDCommenterMinimal
vmap ,c  <Plug>NERDCommenterToggle
nmap ,c  <Plug>NERDCommenterToggle
vmap ,cc <Plug>NERDCommenterComment
nmap ,cc <Plug>NERDCommenterComment
nnoremap // q/
nnoremap :: q:
nmap :W :w
nnoremap ?? q?
nmap <silent> K :e:$
map Q gq
xmap S <Plug>VSurround
snoremap U b<BS>U
vmap [% [%m'gv``
snoremap \ b<BS>\
map <silent> \w\t <Plug>VimwikiTabMakeDiaryNote
map <silent> \w\w <Plug>VimwikiMakeDiaryNote
map <silent> \ws <Plug>VimwikiUISelect
map <silent> \wt <Plug>VimwikiTabGoHome
map <silent> \ww <Plug>VimwikiGoHome
nmap <silent> \cv <Plug>VCSVimDiff
nmap <silent> \cu <Plug>VCSUpdate
nmap <silent> \cU <Plug>VCSUnlock
nmap <silent> \cs <Plug>VCSStatus
nmap <silent> \cr <Plug>VCSReview
nmap <silent> \cq <Plug>VCSRevert
nmap <silent> \cn <Plug>VCSAnnotate
nmap <silent> \cN <Plug>VCSSplitAnnotate
nmap <silent> \cl <Plug>VCSLog
nmap <silent> \cL <Plug>VCSLock
nmap <silent> \ci <Plug>VCSInfo
nmap <silent> \cg <Plug>VCSGotoOriginal
nmap <silent> \cG <Plug>VCSClearAndGotoOriginal
nmap <silent> \cd <Plug>VCSDiff
nmap <silent> \cD <Plug>VCSDelete
nmap <silent> \cc <Plug>VCSCommit
nmap <silent> \ca <Plug>VCSAdd
map \dk <Plug>DirDiffPrev
map \dj <Plug>DirDiffNext
map \dp <Plug>DirDiffPut
map \dg <Plug>DirDiffGet
map <silent> \w2 :w:VimwikiAll2HTML:echo "Saved wiki to HTML."
map <silent> \snip :call ResetSnippets() | call GetSnippets(g:snippets_dir, "_") | call GetSnippets(g:snippets_dir, &ft):echo "Snippets for format \"" . &ft . "\" updated."
nmap <silent> \ll o:call Timestamp("short") | call FoldWrap()
nmap <silent> \fi :call FoldInsert()
nmap <silent> \fw :call FoldWrap()
nmap <silent> \sl :call Timestamp("long")
nmap <silent> \sd :call Timestamp("date")
nmap \hg :HelpGrep
nmap \pp :help:winc _:winc |:help 
nmap \hw :help:silent call AdjustFont(-4):set columns=115 lines=999:winc _:winc |:help 
nmap \_ Bi<em>ea</em>
nmap <silent> \q :call FormatSqlStatement()
nmap <silent> \t :call HandleTS()
nmap <silent> \/ :call HandleURI()
nmap <silent> \c :call ScratchBuffer("scratch")
nmap <silent> \0 :silent normal zvzt
nmap <silent> \= :call FoldDefaultNodes():normal zv]z[zzt
nmap <silent> \] :NERDTreeToggle
nmap <silent> \j :call HandleMantis()
nmap \\ :call CommitSession()
nmap <silent> \w :!wc -w %
vmap ]% ]%m'gv``
snoremap ^ b<BS>^
snoremap ` b<BS>`
vmap a% [%v]%
nmap cs <Plug>Csurround
nmap ds <Plug>Dsurround
nmap gx <Plug>NetrwBrowseX
xmap s <Plug>Vsurround
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
nnoremap <C-Down> :silent! :call AdjustFont(-1)
nnoremap <C-Up> :silent! :call AdjustFont(1)
nnoremap <silent> <C-Right> gt
nnoremap <silent> <C-Left> gT
nmap <silent> <D-w> :bd
nmap <silent> <D-t> :101tabnew
map <M-Down> }
noremap <D-Down> <C-End>
map <M-Up> {
noremap <D-Up> <C-Home>
noremap <M-Right> <C-Right>
noremap <D-Right> <End>
noremap <M-Left> <C-Left>
noremap <D-Left> <Home>
snoremap <Left> bi
snoremap <Right> a
snoremap <BS> b<BS>
snoremap <silent> <S-Tab> i<Right>=BackwardsSnippet()
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
nnoremap <silent> <Plug>CVSWatchRemove :CVSWatch remove
nnoremap <silent> <Plug>CVSWatchOn :CVSWatch on
nnoremap <silent> <Plug>CVSWatchOff :CVSWatch off
nnoremap <silent> <Plug>CVSWatchAdd :CVSWatch add
nnoremap <silent> <Plug>CVSWatchers :CVSWatchers
nnoremap <silent> <Plug>CVSUnedit :CVSUnedit
nnoremap <silent> <Plug>CVSEditors :CVSEditors
nnoremap <silent> <Plug>CVSEdit :CVSEdit
nnoremap <silent> <Plug>VCSVimDiff :VCSVimDiff
nnoremap <silent> <Plug>VCSUpdate :VCSUpdate
nnoremap <silent> <Plug>VCSUnlock :VCSUnlock
nnoremap <silent> <Plug>VCSStatus :VCSStatus
nnoremap <silent> <Plug>VCSSplitAnnotate :VCSAnnotate!
nnoremap <silent> <Plug>VCSReview :VCSReview
nnoremap <silent> <Plug>VCSRevert :VCSRevert
nnoremap <silent> <Plug>VCSLog :VCSLog
nnoremap <silent> <Plug>VCSLock :VCSLock
nnoremap <silent> <Plug>VCSInfo :VCSInfo
nnoremap <silent> <Plug>VCSClearAndGotoOriginal :VCSGotoOriginal!
nnoremap <silent> <Plug>VCSGotoOriginal :VCSGotoOriginal
nnoremap <silent> <Plug>VCSDiff :VCSDiff
nnoremap <silent> <Plug>VCSDelete :VCSDelete
nnoremap <silent> <Plug>VCSCommit :VCSCommit
nnoremap <silent> <Plug>VCSAnnotate :VCSAnnotate
nnoremap <silent> <Plug>VCSAdd :VCSAdd
map <M-F3> :call CSV_clear_all()  
map <S-F3> :call CSV_toggle_field(CSV_get_field(0))
map <S-F5> :call CSV_goto_highlighted(-1)
map <S-F6> :call CSV_goto_highlighted(1)
map <C-F5> :call CSV_goto_field()
map <C-F6> :call CSV_get_new_sep()
nmap <silent> <Plug>NERDCommenterAppend :call NERDComment(0, "append")
nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment(0, "toEOL")
vnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment(1, "uncomment")
nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment(0, "uncomment")
vnoremap <silent> <Plug>NERDCommenterNest :call NERDComment(1, "nested")
nnoremap <silent> <Plug>NERDCommenterNest :call NERDComment(0, "nested")
vnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment(1, "alignBoth")
nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment(0, "alignBoth")
vnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment(1, "alignLeft")
nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment(0, "alignLeft")
vmap <silent> <Plug>NERDCommenterYank :call NERDComment(1, "yank")
nmap <silent> <Plug>NERDCommenterYank :call NERDComment(0, "yank")
vnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment(1, "invert")
nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment(0, "invert")
vnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment(1, "sexy")
nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment(0, "sexy")
vnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment(1, "minimal")
nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment(0, "minimal")
vnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment(1, "toggle")
nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment(0, "toggle")
vnoremap <silent> <Plug>NERDCommenterComment :call NERDComment(1, "norm")
nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment(0, "norm")
map <silent> <C-S-Tab> :BufExplorerk
map <silent> <C-Tab> :BufExplorerj
nmap <Down> :echo "You should have typed j instead."
nmap <Up> :echo "You should have typed k instead."
nmap <Right> :echo "You should have typed l instead."
nmap <Left> :echo "You should have typed h instead."
nmap <S-Space> 
map <F1> :Help
nnoremap <Nul> :
xmap <BS> "-d
vmap <D-x> "*d
vmap <D-c> "*y
vmap <D-v> "-d"*P
nmap <D-v> "*P
imap S <Plug>ISurround
imap s <Plug>Isurround
inoremap <silent> 	 =TriggerSnippet()
imap <silent>  :call Reset() | nohlsa
inoremap  :set completeopt+=menuonea
inoremap <silent> 	 =ShowAvailableSnips()
imap  <Plug>Isurround
imap   :call ReloadVimrc() | :echo "Resourced .vimrc."
let &cpo=s:cpo_save
unlet s:cpo_save
set autowrite
set background=dark
set backspace=indent,eol,start
set clipboard=unnamed
set commentstring=
set diffopt=filler,vertical
set directory=~/.vim/swap//,~/vimfiles/swap//
set display=lastline,uhex
set fileencodings=ucs-bom,utf-8,default,latin1
set foldlevelstart=999
set fuoptions=maxhorz,maxvert
set guifont=Inconsolata:h11
set guioptions=egmrLt
set guitablabel=%m\ %N\ %t\ %r
set helplang=en
set history=10000
set hlsearch
set incsearch
set indentkeys=0{,0},:,0#,!^F,O,e
set iskeyword=@,48-57,_,192-255,-
set langmenu=none
set laststatus=2
set listchars=tab:>-,trail:-
set mouse=a
set printexpr=system('open\ -a\ Preview\ '.v:fname_in)\ +\ v:shell_error
set ruler
set runtimepath=~/.vim,~/.vim/bundle/PickAColor,/Applications/Tasks.app/Contents/Resources/vim/vimfiles,/Applications/Tasks.app/Contents/Resources/vim/runtime,/Applications/Tasks.app/Contents/Resources/vim/vimfiles/after,~/.vim/after
set sessionoptions=folds,help,options,tabpages,winsize,globals,sesdir,resize,winpos,unix
set shiftwidth=4
set shortmess=filnxtToOIA
set showbreak=\ \ 
set showcmd
set spellcapcheck=off
set splitbelow
set splitright
set statusline=%<(%n)\ %m%y%r\ %f\ %=%-14.(%l,%c%V%)\ %P
set switchbuf=useopen,usetab
set tabline=%!MyTabLine()
set tabpagemax=100
set tabstop=2
set tags=./tags,tags,~/sandbox/personal/tags
set termencoding=utf-8
set undolevels=100
set window=82
set winminheight=0
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
let NERDTreeMapPreviewSplit = "gi"
let NERDTreeMapCloseChildren = "X"
let NERDTreeShowHidden = "0"
let TailMinusF_Loaded =  1 
let NERDSpaceDelims = "0"
let NERDTreeMapCloseDir = "x"
let NERDUsePlaceHolders = "1"
let NERDTreeShowLineNumbers = "0"
let DirDiffSort =  1 
let NERDTreeMapToggleHidden = "I"
let NERDTreeWinSize = "31"
let NERDTreeMapRefreshRoot = "R"
let DirDiffInteractive =  0 
let NERDTreeMapPreview = "go"
let NERDTreeMapActivateNode = "o"
let NERDTreeWinPos = "left"
let DirDiffAddArgs = ""
let NERDTreeStatusline = "%{b:NERDTreeRoot.path.strForOS(0)}"
let NERDTreeMapOpenInTabSilent = "T"
let NERDTreeMapHelp = "?"
let NERDTreeMapJumpParent = "p"
let NERDTreeMapToggleFilters = "f"
let NERDTreeMapJumpLastChild = "J"
let NERDTreeMapJumpPrevSibling = "<C-k>"
let NERDTreeShowBookmarks = "0"
let NERDMenuMode = "3"
let NERDTreeMapOpenExpl = "e"
let CSV_string_delimiter = "\""
let NERDTreeMouseMode = "1"
let NERDDefaultNesting = "1"
let NERDTreeChDirMode = "0"
let NERDTreeRemoveDirCmd = "rm -rf "
let NERDTreeAutoCenterThreshold = "3"
let NERDTreeShowFiles = "1"
let NERDTreeMapOpenSplit = "i"
let DirDiffTextFiles = "Files "
let NERDTreeCaseSensitiveSort = "0"
let NERDTreeHijackNetrw = "1"
let NERDTreeMapFilesystemMenu = "m"
let NERDTreeMapRefresh = "r"
let CSV_field_list = ""
let TailMinusF_Height =  10 
let NERDTreeHighlightCursorline = "1"
let NERDDelimiterRequests = "1"
let NERDLPlace = "[>"
let NERDTreeMapOpenInTab = "t"
let CSV_separator = ","
let DirDiffExcludes = ""
let NERDCreateDefaultMappings = "1"
let DirDiffDynamicDiffText =  0 
let NERDTreeMapPreviewVSplit = "gs"
let NERDChristmasTree = "1"
let NERDTreeNotificationThreshold = "100"
let NERDCommentWholeLinesInVMode = "0"
let CSV_mono =  0 
let DirDiffTextDiffer = " differ"
let BufExplorer_title = "[Buf List]"
let NERDTreeMapChdir = "cd"
let NERDRPlace = "<]"
let DirDiffWindowSize =  14 
let NERDTreeMapExecute = "!"
let NERDRemoveExtraSpaces = "1"
let NERDRemoveAltComs = "1"
let NERDTreeAutoCenter = "1"
let DirDiffTextOnlyIn = "Only in "
let TailMinusF_Center_Win =  0 
let DirDiffTextAnd = " and "
let NERDTreeMapOpenVSplit = "s"
let NERDTreeMapDeleteBookmark = "D"
let NERDBlockComIgnoreEmpty = "0"
let AutoHiVersion = "0.2"
let NERDTreeMapJumpNextSibling = "<C-j>"
let DirDiffIgnoreCase =  0 
let NERDTreeMapJumpRoot = "P"
let NERDTreeCopyCmd = "cp -r "
let NERDTreeMapQuit = "q"
let NERDTreeMapChangeRoot = "C"
let NERDCompactSexyComs = "0"
let NERDTreeSortDirs = "1"
let NERDTreeMapToggleFiles = "F"
let NERDAllowAnyVisualDelims = "1"
let DirDiffIgnore = ""
let BufExploreAdd =  1 
let NERDTreeMapJumpFirstChild = "K"
let NERDTreeMapOpenRecursively = "O"
let NERDTreeMapToggleBookmarks = "B"
let NERDTreeBookmarksFile = "/Users/seth/.NERDTreeBookmarks"
let NERDTreeMapUpdir = "u"
let NERDTreeMapUpdirKeepOpen = "U"
let NERDTreeQuitOnOpen = "0"
silent only
exe "cd " . escape(expand("<sfile>:p:h"), ' ')
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +1 ~/sandbox/personal/todo/personal.tst.txt
silent! argdel *
set lines=83 columns=137
winpos 840 1028
buffer ~/sandbox/personal/todo/personal.tst.txt
set splitbelow splitright
wincmd t
set winheight=1 winwidth=1
argglobal
let s:cpo_save=&cpo
set cpo&vim
imap <buffer> <silent> <D-9> :tabn 9
imap <buffer> <silent> <D-8> :tabn 8
imap <buffer> <silent> <D-7> :tabn 7
imap <buffer> <silent> <D-6> :tabn 6
imap <buffer> <silent> <D-5> :tabn 5
imap <buffer> <silent> <D-4> :tabn 4
imap <buffer> <silent> <D-3> :tabn 3
imap <buffer> <silent> <D-2> :tabn 2
imap <buffer> <silent> <D-1> :tabn 1
imap <buffer> <silent> <D-0> :tabn 10
nmap <buffer> <silent> 	 /^\([A-Z]\+ \)\{1,\}:nohls
nmap <buffer> <silent> <NL> :call TaskstackMoveItemDown()
nmap <buffer> <silent>  :call TaskstackMoveItemUp()
nmap <buffer> <silent>  /^@.* {\{3\}:nohls
nmap <buffer> <silent>  ?^@.* {\{3\}:nohls
nmap <buffer> <silent> x :call TaskstackGroups()
nmap <buffer> <silent> $ :call TaskstackEOL()
nmap <buffer> :w :call TaskstackAutosaveReminder()
imap <buffer> <silent> ¹ :tabn 9
imap <buffer> <silent> ¸ :tabn 8
imap <buffer> <silent> · :tabn 7
imap <buffer> <silent> ¶ :tabn 6
imap <buffer> <silent> µ :tabn 5
imap <buffer> <silent> ´ :tabn 4
imap <buffer> <silent> ³ :tabn 3
imap <buffer> <silent> ² :tabn 2
imap <buffer> <silent> ± :tabn 1
imap <buffer> <silent> ° :tabn 10
nmap <buffer> LL :call TaskstackScratch()
nmap <buffer> NN :call TaskstackNewItem()
nmap <buffer> QQ :call TaskstackCompleteItem(g:completed_prefix)
nmap <buffer> XX :call TaskstackCompleteItem(g:aborted_prefix)
nmap <buffer> ZZ :call TaskstackHide()
nmap <buffer> <silent> <D-9> 9gt
nmap <buffer> <silent> <D-8> 8gt
nmap <buffer> <silent> <D-7> 7gt
nmap <buffer> <silent> <D-6> 6gt
nmap <buffer> <silent> <D-5> 5gt
nmap <buffer> <silent> <D-4> 4gt
nmap <buffer> <silent> <D-3> 3gt
nmap <buffer> <silent> <D-2> 2gt
nmap <buffer> <silent> <D-1> 1gt
nmap <buffer> <silent> <D-0> 10gt
nmap <buffer> <silent> <S-Tab> ?^\([A-Z]\+ \)\{1,\}:nohls
nmap <buffer> <silent> ¹ 9gt
nmap <buffer> <silent> ¸ 8gt
nmap <buffer> <silent> · 7gt
nmap <buffer> <silent> ¶ 6gt
nmap <buffer> <silent> µ 5gt
nmap <buffer> <silent> ´ 4gt
nmap <buffer> <silent> ³ 3gt
nmap <buffer> <silent> ² 2gt
nmap <buffer> <silent> ± 1gt
nmap <buffer> <silent> ° 10gt
imap <buffer> NN :call TaskstackNewItem()
imap <buffer> QQ :call TaskstackCompleteItem(g:completed_prefix)
imap <buffer> XX :call TaskstackCompleteItem(g:aborted_prefix)
imap <buffer> ZZ :call TaskstackHide()
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal noexpandtab
if &filetype != '_.txt.tst'
setlocal filetype=_.txt.tst
endif
set foldcolumn=4
setlocal foldcolumn=4
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=4
setlocal foldmarker={{{,}}}
set foldmethod=marker
setlocal foldmethod=marker
setlocal foldminlines=1
setlocal foldnestmax=20
set foldtext=MyFoldText()
setlocal foldtext=MyFoldText()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,-
setlocal keywordprg=
set linebreak
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal nomacmeta
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
set relativenumber
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=off
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != '_.txt.tst'
setlocal syntax=_.txt.tst
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
set winfixheight
setlocal winfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
8
normal zo
49
normal zo
49
normal zc
114
normal zo
114
normal zc
140
normal zo
140
normal zc
162
normal zc
176
normal zc
180
normal zc
185
normal zc
8
normal zo
28
normal zo
43
normal zo
49
normal zo
50
normal zo
66
normal zo
89
normal zo
108
normal zo
49
normal zo
114
normal zo
115
normal zo
121
normal zo
127
normal zo
114
normal zo
140
normal zo
141
normal zo
148
normal zo
153
normal zo
158
normal zo
140
normal zo
162
normal zo
176
normal zo
180
normal zo
185
normal zo
201
normal zo
209
normal zo
219
normal zc
225
normal zc
230
normal zc
238
normal zc
251
normal zc
259
normal zc
269
normal zc
273
normal zc
285
normal zc
292
normal zc
298
normal zc
303
normal zc
312
normal zc
325
normal zc
330
normal zc
336
normal zc
340
normal zc
349
normal zc
358
normal zc
366
normal zc
371
normal zc
379
normal zc
388
normal zc
394
normal zc
400
normal zc
408
normal zc
419
normal zc
426
normal zc
430
normal zc
441
normal zc
447
normal zc
452
normal zc
465
normal zc
475
normal zc
479
normal zc
491
normal zc
504
normal zc
509
normal zc
515
normal zc
523
normal zc
527
normal zc
537
normal zc
559
normal zo
559
normal zc
584
normal zc
596
normal zo
596
normal zc
626
normal zc
638
normal zc
650
normal zc
655
normal zc
663
normal zc
669
normal zc
683
normal zc
698
normal zc
709
normal zc
728
normal zc
739
normal zc
743
normal zc
752
normal zc
756
normal zc
760
normal zc
764
normal zc
772
normal zc
776
normal zc
781
normal zc
786
normal zc
792
normal zc
796
normal zc
800
normal zc
805
normal zc
809
normal zc
815
normal zc
822
normal zc
828
normal zc
834
normal zc
838
normal zc
842
normal zc
847
normal zc
852
normal zc
857
normal zc
862
normal zc
866
normal zc
874
normal zc
887
normal zc
893
normal zc
898
normal zc
903
normal zc
909
normal zc
915
normal zc
926
normal zc
932
normal zc
936
normal zc
941
normal zc
946
normal zc
950
normal zc
955
normal zc
961
normal zc
967
normal zc
972
normal zc
979
normal zc
984
normal zc
990
normal zc
998
normal zc
1010
normal zc
1020
normal zc
1025
normal zc
1034
normal zc
1049
normal zc
1054
normal zc
1062
normal zc
1072
normal zc
1079
normal zc
1083
normal zc
1088
normal zc
1094
normal zc
1103
normal zc
1109
normal zc
1113
normal zc
1120
normal zc
1125
normal zc
1131
normal zc
1142
normal zc
1152
normal zc
1158
normal zc
1164
normal zc
1191
normal zc
1197
normal zc
1204
normal zc
1212
normal zc
1225
normal zc
1229
normal zc
1236
normal zc
1253
normal zc
1275
normal zc
1289
normal zc
1295
normal zc
1303
normal zc
1312
normal zc
1349
normal zo
1349
normal zc
1593
normal zo
1594
normal zc
1625
normal zc
1630
normal zc
1640
normal zc
1711
normal zc
1721
normal zc
1727
normal zc
1749
normal zc
1773
normal zc
1791
normal zc
1814
normal zc
1817
normal zc
1824
normal zo
1824
normal zc
1937
normal zc
1956
normal zc
1965
normal zc
1986
normal zc
2021
normal zc
2025
normal zc
2030
normal zc
2035
normal zo
2071
normal zo
2071
normal zo
2035
normal zo
2120
normal zc
2128
normal zo
2128
normal zc
2165
normal zc
1593
normal zo
let s:l = 2 - ((1 * winheight(0) + 40) / 81)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
2
normal! 045l
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToOIA
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
