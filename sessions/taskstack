let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
imap <D-BS> 
imap <M-BS> 
imap <M-Down> }
inoremap <D-Down> <C-End>
imap <M-Up> {
inoremap <D-Up> <C-Home>
noremap! <M-Right> <C-Right>
noremap! <D-Right> <End>
noremap! <M-Left> <C-Left>
noremap! <D-Left> <Home>
inoremap <silent> <S-Tab> =BackwardsSnippet()
inoremap <silent> <Plug>NERDCommenterInInsert  <BS>:call NERDComment(0, "insert")
imap <silent> <D-9> :tabn 9
imap <silent> <D-8> :tabn 8
imap <silent> <D-7> :tabn 7
imap <silent> <D-6> :tabn 6
imap <silent> <D-5> :tabn 5
imap <silent> <D-4> :tabn 4
imap <silent> <D-3> :tabn 3
imap <silent> <D-2> :tabn 2
imap <silent> <D-1> :tabn 1
imap <silent> <D-0> :tabn 10
imap <F1> :Help
imap <Nul> :
map! <D-v> *
nnoremap <silent>  
nmap <silent> - :call AccordionMode()
nmap <silent> l l:call AccordionMode()
nmap <silent> h h:call AccordionMode()
nmap <silent> k k:call AccordionMode()
nmap <silent> j j:call AccordionMode()
nmap P :call SectionHeadNav(-1, 1)
nmap p :call SectionHeadNav(-1, 0)
nmap N :call SectionHeadNav(1, 1)
nmap n :call SectionHeadNav(1, 0)
nmap d :silent! lclose
nmap ? :call FunctionLocationIndex()
nmap / :call HeaderLocationIndex()
map x :call feedkeys("yyq:p\r", "n")
nmap c :exec ":lcd " . expand("%:p:h")
snoremap <silent> 	 i<Right>=TriggerSnippet()
nnoremap <silent>  :call Reset() | nohls
vmap  <Plug>TwitvimVisual
snoremap  b<BS>
nmap p :call system("ssh localhost pbcopy", getreg('"'))
nnoremap g :GundoToggle
nmap <silent>  :call RemoveTimestamp()
nmap <silent>  :call AddOrUpdateTimestampSolicitingAnnotation()
nmap <silent>  :call AddOrUpdateTimestamp("")
nmap <silent> Y :call AddOrUpdateTimestamp("", "force")
nmap <silent>  :call TimestampAutoUpdateToggle()
nmap s :SnipUp
nmap v :call ReloadVimrc() | :echo "Resourced .vimrc."
map <silent>  w t <Plug>VimwikiTabMakeDiaryNote
map <silent>  w w <Plug>VimwikiMakeDiaryNote
map <silent>  ws <Plug>VimwikiUISelect
map <silent>  wt <Plug>VimwikiTabIndex
map <silent>  ww <Plug>VimwikiIndex
noremap  l :call PreviewWord(0)
map <silent>  o :call OpenFileFromScriptnames()
nmap <silent>  cv <Plug>VCSVimDiff
nmap <silent>  cU <Plug>VCSUnlock
nmap <silent>  cr <Plug>VCSReview
nmap <silent>  cq <Plug>VCSRevert
nmap <silent>  cN <Plug>VCSSplitAnnotate
nmap <silent>  cL <Plug>VCSLock
nmap <silent>  cg <Plug>VCSGotoOriginal
nmap <silent>  cG <Plug>VCSClearAndGotoOriginal
nmap <silent>  cd <Plug>VCSDiff
nmap <silent>  cD <Plug>VCSDelete
nmap  ca <Plug>NERDCommenterAltDelims
vmap  cA <Plug>NERDCommenterAppend
nmap  cA <Plug>NERDCommenterAppend
vmap  c$ <Plug>NERDCommenterToEOL
nmap  c$ <Plug>NERDCommenterToEOL
vmap  cu <Plug>NERDCommenterUncomment
nmap  cu <Plug>NERDCommenterUncomment
vmap  cn <Plug>NERDCommenterNest
nmap  cn <Plug>NERDCommenterNest
vmap  cb <Plug>NERDCommenterAlignBoth
nmap  cb <Plug>NERDCommenterAlignBoth
vmap  cl <Plug>NERDCommenterAlignLeft
nmap  cl <Plug>NERDCommenterAlignLeft
vmap  cy <Plug>NERDCommenterYank
nmap  cy <Plug>NERDCommenterYank
vmap  ci <Plug>NERDCommenterInvert
nmap  ci <Plug>NERDCommenterInvert
vmap  cs <Plug>NERDCommenterSexy
nmap  cs <Plug>NERDCommenterSexy
vmap  cm <Plug>NERDCommenterMinimal
nmap  cm <Plug>NERDCommenterMinimal
vmap  c  <Plug>NERDCommenterToggle
nmap  c  <Plug>NERDCommenterToggle
vmap  cc <Plug>NERDCommenterComment
nmap  cc <Plug>NERDCommenterComment
nmap  p <Plug>RefreshColorScheme
nmap  [ <Plug>HexHighlightRefresh
nmap  <F2> <Plug>HexHighlightToggle
nmap <silent>  slr :DBListVar
xmap <silent>  sa :DBVarRangeAssign
nmap <silent>  sap :'<,'>DBVarRangeAssign
nmap <silent>  sal :.,.DBVarRangeAssign
nmap <silent>  sas :1,$DBVarRangeAssign
nmap  so <Plug>DBOrientationToggle
nmap  sh <Plug>DBHistory
nmap  slv <Plug>DBListView
nmap  slp <Plug>DBListProcedure
nmap  slt <Plug>DBListTable
xmap <silent>  slc :exec 'DBListColumn "'.DB_getVisualBlock().'"'
nmap  slc <Plug>DBListColumn
nmap  sbp <Plug>DBPromptForBufferParameters
nmap  sdpa <Plug>DBDescribeProcedureAskName
xmap <silent>  sdp :exec 'DBDescribeProcedure "'.DB_getVisualBlock().'"'
nmap  sdp <Plug>DBDescribeProcedure
nmap  sdta <Plug>DBDescribeTableAskName
xmap <silent>  sdt :exec 'DBDescribeTable "'.DB_getVisualBlock().'"'
nmap  sdt <Plug>DBDescribeTable
xmap <silent>  sT :exec 'DBSelectFromTableTopX "'.DB_getVisualBlock().'"'
nmap  sT <Plug>DBSelectFromTopXTable
nmap  sta <Plug>DBSelectFromTableAskName
nmap  stw <Plug>DBSelectFromTableWithWhere
xmap <silent>  st :exec 'DBSelectFromTable "'.DB_getVisualBlock().'"'
nmap  st <Plug>DBSelectFromTable
nmap <silent>  sep :'<,'>DBExecRangeSQL
nmap <silent>  sel :.,.DBExecRangeSQL
nmap <silent>  sea :1,$DBExecRangeSQL
nmap  sE <Plug>DBExecSQLUnderTopXCursor
nmap  se <Plug>DBExecSQLUnderCursor
xmap  sE <Plug>DBExecVisualTopXSQL
xmap  se <Plug>DBExecVisualSQL
nmap  caL <Plug>CalendarH
nmap  cal <Plug>CalendarV
nmap <silent>  sm <Plug>smgr_MapSnippetsManager
map  rwp <Plug>RestoreWinPosn
map  swp <Plug>SaveWinPosn
map  dk <Plug>DirDiffPrev
map  dj <Plug>DirDiffNext
map  dp <Plug>DirDiffPut
map  dg <Plug>DirDiffGet
map   0"ty$:t:echo "Executed: " . @t
map  sv :call OpenRelatedSnippetFileInVsplit()
nmap <silent>  ll o:call Timestamp("short") | call FoldWrap()
nmap <silent>  fi :call FoldInsert()
nmap <silent>  fw :call FoldWrap()
nmap <silent>  sl :call Timestamp("long")
nmap <silent>  sd :call Timestamp("date")
nmap  hg :HelpGrep
nmap  pp :help:winc _:winc |:help 
nmap  hw :help:silent call AdjustFont(-4):set columns=115 lines=999:winc _:winc |:help 
nmap  _ Bi<em>ea</em>
nmap <silent>  q :call FormatSqlStatement()
nmap <silent>  j :call HandleMantis()
nmap <silent>  t :call HandleTS()
nmap <silent>  / :call HandleURI()
nmap <silent>  c :call ScratchBuffer("scratch")
nmap <silent>  0 :silent normal zvzt
nmap <silent>  = :call FoldDefaultNodes():normal zv]z[zzt
nmap <silent>  ] :NERDTreeToggle
nmap  \ :call CommitSession()
nmap <silent>  w :!wc -w %
snoremap % b<BS>%
snoremap ' b<BS>'
nnoremap // q/
nnoremap :: q:
nnoremap ?? q?
imap <silent> Â¹ :tabn 9
imap <silent> Â¸ :tabn 8
imap <silent> Â· :tabn 7
imap <silent> Â¶ :tabn 6
imap <silent> Âµ :tabn 5
imap <silent> Â´ :tabn 4
imap <silent> Â³ :tabn 3
imap <silent> Â² :tabn 2
imap <silent> Â± :tabn 1
imap <silent> Â° :tabn 10
map Q gq
xmap S <Plug>VSurround
snoremap U b<BS>U
map Y y$
vmap [% [%m'gv``
snoremap \ b<BS>\
nmap \j :call JournalEntry()
vmap ]% ]%m'gv``
snoremap ^ b<BS>^
snoremap ` b<BS>`
vmap a% [%v]%
nmap cs <Plug>Csurround
nmap cr <Plug>Coerce
nmap ds <Plug>Dsurround
nmap gx <Plug>NetrwBrowseX
xmap gS <Plug>VgSurround
xmap s <Plug>Vsurround
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
nnoremap <C-Down> :silent! :call AdjustFont(-1)
nnoremap <C-Up> :silent! :call AdjustFont(1)
nnoremap <silent> <C-Right> gt
nnoremap <silent> <C-Left> gT
map <D-f> :CommandT
map <silent> <D-E> :cp 
map <silent> <D-e> :cn 
map <silent> <D-P> :lp 
map <silent> <D-p> :ln 
nmap <silent> <D-w> :bd
nmap <silent> <D-t> :101tabnew
map <M-Down> }
noremap <D-Down> <C-End>
map <M-Up> {
noremap <D-Up> <C-Home>
noremap <M-Right> <C-Right>
noremap <D-Right> <End>
noremap <M-Left> <C-Left>
noremap <D-Left> <Home>
snoremap <Left> bi
snoremap <Right> a
snoremap <BS> b<BS>
snoremap <silent> <S-Tab> i<Right>=BackwardsSnippet()
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
nnoremap <silent> <Plug>CVSWatchRemove :CVSWatch remove
nnoremap <silent> <Plug>CVSWatchOn :CVSWatch on
nnoremap <silent> <Plug>CVSWatchOff :CVSWatch off
nnoremap <silent> <Plug>CVSWatchAdd :CVSWatch add
nnoremap <silent> <Plug>CVSWatchers :CVSWatchers
nnoremap <silent> <Plug>CVSUnedit :CVSUnedit
nnoremap <silent> <Plug>CVSEditors :CVSEditors
nnoremap <silent> <Plug>CVSEdit :CVSEdit
nnoremap <silent> <Plug>VCSVimDiff :VCSVimDiff
nnoremap <silent> <Plug>VCSUpdate :VCSUpdate
nnoremap <silent> <Plug>VCSUnlock :VCSUnlock
nnoremap <silent> <Plug>VCSStatus :VCSStatus
nnoremap <silent> <Plug>VCSSplitAnnotate :VCSAnnotate!
nnoremap <silent> <Plug>VCSReview :VCSReview
nnoremap <silent> <Plug>VCSRevert :VCSRevert
nnoremap <silent> <Plug>VCSLog :VCSLog
nnoremap <silent> <Plug>VCSLock :VCSLock
nnoremap <silent> <Plug>VCSInfo :VCSInfo
nnoremap <silent> <Plug>VCSClearAndGotoOriginal :VCSGotoOriginal!
nnoremap <silent> <Plug>VCSGotoOriginal :VCSGotoOriginal
nnoremap <silent> <Plug>VCSDiff :VCSDiff
nnoremap <silent> <Plug>VCSDelete :VCSDelete
nnoremap <silent> <Plug>VCSCommit :VCSCommit
nnoremap <silent> <Plug>VCSAnnotate :VCSAnnotate
nnoremap <silent> <Plug>VCSAdd :VCSAdd
nmap <silent> <Plug>NERDCommenterAppend :call NERDComment(0, "append")
nnoremap <silent> <Plug>NERDCommenterToEOL :call NERDComment(0, "toEOL")
vnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment(1, "uncomment")
nnoremap <silent> <Plug>NERDCommenterUncomment :call NERDComment(0, "uncomment")
vnoremap <silent> <Plug>NERDCommenterNest :call NERDComment(1, "nested")
nnoremap <silent> <Plug>NERDCommenterNest :call NERDComment(0, "nested")
vnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment(1, "alignBoth")
nnoremap <silent> <Plug>NERDCommenterAlignBoth :call NERDComment(0, "alignBoth")
vnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment(1, "alignLeft")
nnoremap <silent> <Plug>NERDCommenterAlignLeft :call NERDComment(0, "alignLeft")
vmap <silent> <Plug>NERDCommenterYank :call NERDComment(1, "yank")
nmap <silent> <Plug>NERDCommenterYank :call NERDComment(0, "yank")
vnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment(1, "invert")
nnoremap <silent> <Plug>NERDCommenterInvert :call NERDComment(0, "invert")
vnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment(1, "sexy")
nnoremap <silent> <Plug>NERDCommenterSexy :call NERDComment(0, "sexy")
vnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment(1, "minimal")
nnoremap <silent> <Plug>NERDCommenterMinimal :call NERDComment(0, "minimal")
vnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment(1, "toggle")
nnoremap <silent> <Plug>NERDCommenterToggle :call NERDComment(0, "toggle")
vnoremap <silent> <Plug>NERDCommenterComment :call NERDComment(1, "norm")
nnoremap <silent> <Plug>NERDCommenterComment :call NERDComment(0, "norm")
nnoremap <silent> <Plug>CalendarH :cal Calendar(1)
nnoremap <silent> <Plug>CalendarV :cal Calendar(0)
map <M-F3> :call CSV_clear_all()  
map <S-F3> :call CSV_toggle_field(CSV_get_field(0))
map <S-F5> :call CSV_goto_highlighted(-1)
map <S-F6> :call CSV_goto_highlighted(1)
map <C-F5> :call CSV_goto_field()
map <C-F6> :call CSV_get_new_sep()
nmap <silent> <Plug>RestoreWinPosn :call RestoreWinPosn()
nmap <silent> <Plug>SaveWinPosn :call SaveWinPosn()
map <D-j>e :GrepEngage 
map <D-j>p :cd ~/sandbox/personal/
map <D-j>w :cd ~/sandbox/work/vm/rpx/ruby/rails/
map <silent> <C-S-Tab> :BufExplorerk
map <silent> <C-Tab> :BufExplorerj
nmap <silent> <D-9> 9gt
nmap <silent> <D-8> 8gt
nmap <silent> <D-7> 7gt
nmap <silent> <D-6> 6gt
nmap <silent> <D-5> 5gt
nmap <silent> <D-4> 4gt
nmap <silent> <D-3> 3gt
nmap <silent> <D-2> 2gt
nmap <silent> <D-1> 1gt
nmap <silent> <D-0> 10gt
nmap <Down> :<Down>
nmap <Up> :<Up>
nmap <Right> :<Down>
nmap <Left> :<Up>
nmap <S-Space> 
map <F1> :Help
nnoremap <Nul> :
xmap <BS> "-d
vmap <D-x> "*d
vmap <D-c> "*y
vmap <D-v> "-d"*P
nmap <D-v> "*P
imap S <Plug>ISurround
imap s <Plug>Isurround
inoremap <silent> 	 =TriggerSnippet()
imap <silent>  :call Reset() | nohlsa
inoremap  :set completeopt+=menuonea
inoremap <silent> 	 =ShowAvailableSnips()
imap  <Plug>Isurround
inoremap  u
inoremap  u
imap v  :call ReloadVimrc() | :echo "Resourced .vimrc."
onoremap <expr> Â¡ ToggleNumberDisplay()
xnoremap <expr> Â¡ ToggleNumberDisplay()
nnoremap <expr> Â¡ ToggleNumberDisplay()
nmap <silent> Â¹ 9gt
nmap <silent> Â¸ 8gt
nmap <silent> Â· 7gt
nmap <silent> Â¶ 6gt
nmap <silent> Âµ 5gt
nmap <silent> Â´ 4gt
nmap <silent> Â³ 3gt
nmap <silent> Â² 2gt
nmap <silent> Â± 1gt
nmap <silent> Â° 10gt
vmap Ã´ <Plug>TwitvimVisual
let &cpo=s:cpo_save
unlet s:cpo_save
set autowrite
set background=dark
set backspace=indent,eol,start
set clipboard=unnamed
set commentstring=
set completefunc=vimcomplete#Complete
set diffopt=filler,vertical
set directory=~/.vim/swap//,~/vimfiles/swap//
set display=lastline
set expandtab
set fileencodings=ucs-bom,utf-8,default,latin1
set fuoptions=maxhorz,maxvert
set guifont=Inconsolata:h15
set guioptions=egmrLtc
set guitablabel=%m\ %N\ %t\ %r
set helplang=en
set history=10000
set hlsearch
set incsearch
set indentkeys=0{,0},:,0#,!^F,O,e
set iskeyword=@,48-57,_,192-255,-
set langmenu=none
set laststatus=2
set listchars=tab:>-,trail:-
set mouse=a
set printexpr=system('open\ -a\ Preview\ '.v:fname_in)\ +\ v:shell_error
set ruler
set runtimepath=~/.vim,~/.vim/bundle/MailApp,~/.vim/bundle/RubyTextObjects,~/.vim/bundle/SnippetsMgr,~/.vim/bundle/VimLTextObjects,~/.vim/bundle/abolish,~/.vim/bundle/autotag,~/.vim/bundle/bufexplorer,~/.vim/bundle/calendar,~/.vim/bundle/calfork,~/.vim/bundle/cocoa,~/.vim/bundle/command-t,~/.vim/bundle/conque,~/.vim/bundle/dbext,~/.vim/bundle/fugitive,~/.vim/bundle/fuzzyfinder,~/.vim/bundle/gundo,~/.vim/bundle/hexhighlight,~/.vim/bundle/jslint.vim,~/.vim/bundle/kellys,~/.vim/bundle/l9,~/.vim/bundle/matrix,~/.vim/bundle/nerdcommenter,~/.vim/bundle/nerdtree,~/.vim/bundle/paster,~/.vim/bundle/pickacolor,~/.vim/bundle/project,~/.vim/bundle/rails,~/.vim/bundle/screenshot,~/.vim/bundle/sessionman,~/.vim/bundle/snipmate,~/.vim/bundle/surround,~/.vim/bundle/syntastic,~/.vim/bundle/textobj-user,~/.vim/bundle/twitvim,~/.vim/bundle/vcscommand,~/.vim/bundle/vim-addon-async,~/.vim/bundle/vim-addon-signs,~/.vim/bundle/vim-orgmode,~/.vim/bundle/vim-ruby,~/.vim/bundle/vim-toner,~/.vim/bundle/vimple,~/.vim/bundle/vimwiki,/Applications/Tasks
set sessionoptions=folds,help,options,tabpages,winsize,globals,sesdir,resize,winpos,unix
set shiftwidth=4
set shortmess=filnxtToOIA
set showbreak=\ \ 
set showcmd
set softtabstop=4
set spellcapcheck=off
set splitbelow
set splitright
set statusline=%<(%n)\ %m%y%r\ %f\ %=%-14.(%l,%c%V%)\ %P
set switchbuf=useopen
set tabline=%!MyTabLine()
set tabpagemax=100
set tabstop=2
set tags=./tags,tags,~/sandbox/personal/tags,~/.vim/bundle/vimple/plugin/vim/../../tags/vimbuiltins.tags
set termencoding=utf-8
set undolevels=500
set visualbell
set wildignore=*.o,*.sw?,*.git,*.svn,*.hg,**/build,*.?ib,*.png,*.jpg,*.jpeg,*.mov,*.gif,*.bom,*.azw,*.lpr,*.mbp,*.mode1v3,*.gz,*.vmwarevm,*.rtf,*.pkg,*.developerprofile,*.xcodeproj,*.pdf,*.dmg,*.db,*.otf,*.bz2,*.tiff,*.iso,*.jar,*.dat,**/Cache,*.cache,*.sqlite*,*.collection,*.qsindex,*.qsplugin,*.growlTicket,*.part,*.ics,*.ico,**/iPhone\ Simulator,*.lock*,*.webbookmark
set winminheight=0
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
let NERDTreeMapPreviewSplit = "gi"
let NERDTreeMapCloseChildren = "X"
let NERDTreeShowHidden = "0"
let TailMinusF_Loaded =  1 
let NERDSpaceDelims = "0"
let NERDTreeMapCloseDir = "x"
let ConqueTerm_Color =  1 
let ConqueTerm_Version =  200 
let NERDUsePlaceHolders = "1"
let NERDTreeMapRefresh = "r"
let DirDiffSort =  1 
let NERDTreeMapHelp = "?"
let ConqueTerm_SendFunctionKeys =  0 
let NERDTreeWinSize = "31"
let NERDTreeMapOpenInTab = "t"
let NERDTreeSortDirs = "1"
let NERDTreeMapJumpParent = "p"
let ConqueTerm_TERM = "vt100"
let ConqueTerm_EscKey = "<Esc>"
let DirDiffInteractive =  0 
let NERDTreeMapPreview = "go"
let ConqueTerm_PyExe = ""
let NERDTreeMapActivateNode = "o"
let MailAppl_from = "Seth Milliken <seth@araxia.net>"
let NERDTreeWinPos = "left"
let DirDiffAddArgs = ""
let NERDTreeMapMenu = "m"
let NERDTreeStatusline = "%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path.str():''}"
let NERDTreeMapToggleHidden = "I"
let NERDLPlace = "[>"
let NERDTreeMapOpenInTabSilent = "T"
let NERDTreeMapToggleFilters = "f"
let ConqueTerm_PyVersion =  2 
let BufExploreAdd =  1 
let NERDTreeMapJumpLastChild = "J"
let NERDTreeMapJumpPrevSibling = "<C-k>"
let NERDTreeMapQuit = "q"
let NERDTreeShowBookmarks = "0"
let NERDMenuMode = "3"
let NERDTreeMapRefreshRoot = "R"
let CSV_string_delimiter = "\""
let NERDDefaultNesting = "1"
let NERDTreeMapJumpFirstChild = "K"
let NERDTreeChDirMode = "0"
let NERDTreeRemoveDirCmd = "rm -rf "
let NERDTreeAutoCenterThreshold = "3"
let NERDTreeMapOpenVSplit = "s"
let NERDCreateDefaultMappings = "1"
let NERDTreeMapOpenSplit = "i"
let DirDiffTextFiles = "Files "
let NERDTreeCaseSensitiveSort = "0"
let NERDTreeHijackNetrw = "1"
let NERDTreeShowLineNumbers = "0"
let NERDTreeMapPreviewVSplit = "gs"
let TailMinusF_Height =  10 
let CSV_field_list = ""
let NERDTreeMouseMode = "1"
let CSV_separator = ","
let NERDTreeHighlightCursorline = "1"
let DirDiffExcludes = ""
let ConqueTerm_CloseOnEnd =  0 
let ConqueTerm_InsertOnEnter =  0 
let NERDTreeMapOpenRecursively = "O"
let DirDiffDynamicDiffText =  0 
let NERDChristmasTree = "1"
let NERDTreeNotificationThreshold = "100"
let CSV_mono =  0 
let DirDiffTextDiffer = " differ"
let BufExplorer_title = "[Buf List]"
let NERDTreeMapChdir = "cd"
let NERDRPlace = "<]"
let NERDTreeMapToggleZoom = "A"
let DirDiffWindowSize =  14 
let NERDRemoveExtraSpaces = "1"
let NERDTreeMapUpdir = "u"
let MailApp_bundle = "~/.vim/bundle/MailApp/MailApp.bundle/"
let DirDiffIgnore = ""
let NERDRemoveAltComs = "1"
let NERDTreeAutoCenter = "1"
let ConqueTerm_ToggleKey = "<F8>"
let DirDiffTextOnlyIn = "Only in "
let TailMinusF_Center_Win =  0 
let DirDiffTextAnd = " and "
let NERDCompactSexyComs = "0"
let ConqueTerm_ReadUnfocused =  0 
let NERDTreeMapDeleteBookmark = "D"
let NERDBlockComIgnoreEmpty = "0"
let AutoHiVersion = "0.2"
let NERDTreeMapJumpNextSibling = "<C-j>"
let DirDiffIgnoreCase =  0 
let NERDTreeMapJumpRoot = "P"
let NERDTreeShowFiles = "1"
let NERDCommentWholeLinesInVMode = "0"
let NERDTreeCopyCmd = "cp -r "
let NERDTreeMapChangeRoot = "C"
let ConqueTerm_SessionSupport =  0 
let NERDTreeMapToggleFiles = "F"
let NERDAllowAnyVisualDelims = "1"
let ConqueTerm_CWInsert =  0 
let ConqueTerm_Idx =  0 
let CommandTMatchWindowAtTop =  1 
let ConqueTerm_PromptRegex = "^\\w\\+@[0-9A-Za-z_.-]\\+:[0-9A-Za-z_./\\~,:-]\\+\\$"
let NERDTreeMapOpenExpl = "e"
let NERDTreeMapToggleBookmarks = "B"
let NERDTreeBookmarksFile = "/Users/seth/.NERDTreeBookmarks"
let ConqueTerm_Loaded =  1 
let ConqueTerm_SendVisKey = "<F9>"
let ConqueTerm_Syntax = "conque_term"
let NERDTreeMapUpdirKeepOpen = "U"
let NERDTreeQuitOnOpen = "0"
silent only
exe "cd " . escape(expand("<sfile>:p:h"), ' ')
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +0 ~/sandbox/personal/todo/personal.tst.txt
silent! argdel *
set lines=58 columns=103
winpos 832 1028
buffer ~/sandbox/personal/todo/personal.tst.txt
set splitbelow splitright
wincmd t
set winheight=1 winwidth=1
argglobal
nmap <buffer> / :call TaskstackNavigateToProjectPrompted()
nmap <buffer> <silent> 	 :call search("@.*\\\|^[A-Z]\\+")
let s:cpo_save=&cpo
set cpo&vim
nmap <buffer> <silent> <NL> :call TaskstackMoveItemDown()
nmap <buffer> <silent>  :call TaskstackMoveItemUp()
nmap <buffer> <silent>  /^@.* {\{3\}:nohls
nmap <buffer> <silent>  ?^@.* {\{3\}:nohls
nmap <buffer> <silent> x :call TaskstackGroups()
nmap <buffer> k :echo TaskstackMoveToProjectAutoDetect()
nmap <buffer> <silent> $ :call TaskstackEOL()
nmap <buffer> :w :call TaskstackSave()
nmap <buffer> K :echo TaskstackMoveToProjectPrompt()
nmap <buffer> LL :call TaskstackScratch()
nmap <buffer> NN :call TaskstackNewItem()
nmap <buffer> QQ :call TaskstackCompleteItem(g:completed_prefix)
nmap <buffer> XX :call TaskstackCompleteItem(g:aborted_prefix)
nmap <buffer> ZZ :call TaskstackHide()
nmap <buffer> <silent> <S-Tab> :call search("@.*\\\|^[A-Z]\\+", 'b')
imap <buffer> NN :call TaskstackNewItem()
imap <buffer> QQ :call TaskstackCompleteItem(g:completed_prefix)
imap <buffer> XX :call TaskstackCompleteItem(g:aborted_prefix)
imap <buffer> ZZ :call TaskstackHide()
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal noautoindent
setlocal balloonexpr=
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-
setlocal commentstring=
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
set cursorline
setlocal cursorline
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'tst'
setlocal filetype=tst
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=4
setlocal foldmarker={{{,}}}
set foldmethod=marker
setlocal foldmethod=marker
setlocal foldminlines=1
setlocal foldnestmax=20
set foldtext=CleanFoldText()
setlocal foldtext=CleanFoldText()
setlocal formatexpr=
setlocal formatoptions=tcq
setlocal formatlistpat=^\\s*\\d\\+[\\]:.)}\\t\ ]\\s*
setlocal grepprg=
setlocal iminsert=2
setlocal imsearch=2
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,-
setlocal keywordprg=
set linebreak
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal nomacmeta
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal nonumber
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
set relativenumber
setlocal relativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal shiftwidth=2
setlocal noshortname
setlocal nosmartindent
setlocal softtabstop=2
setlocal nospell
setlocal spellcapcheck=off
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal swapfile
setlocal synmaxcol=3000
if &syntax != 'txt'
setlocal syntax=txt
endif
setlocal tabstop=2
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
1
normal zo
10
normal zc
70
normal zo
103
normal zo
110
normal zo
120
normal zo
127
normal zo
135
normal zo
159
normal zo
175
normal zo
183
normal zo
184
normal zo
200
normal zo
224
normal zo
244
normal zo
249
normal zo
254
normal zo
183
normal zo
262
normal zo
263
normal zo
567
normal zo
571
normal zo
262
normal zo
321
normal zo
322
normal zo
329
normal zo
345
normal zo
358
normal zo
365
normal zo
321
normal zo
371
normal zo
385
normal zo
389
normal zo
392
normal zo
389
normal zo
397
normal zo
423
normal zo
1
normal zo
432
normal zo
433
normal zo
434
normal zc
433
normal zc
432
normal zo
2049
normal zo
2063
normal zo
2100
normal zo
2110
normal zo
2191
normal zo
2219
normal zo
2243
normal zo
2261
normal zo
2284
normal zc
2457
normal zo
2492
normal zo
2496
normal zo
2501
normal zo
2506
normal zo
2507
normal zo
2507
normal zo
2506
normal zo
2063
normal zo
let s:l = 2 - ((1 * winheight(0) + 28) / 56)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
2
normal! 046l
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToOIA
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
