snippet header
	" File: ${1:`expand('%:t')`}
	" Author: ${2:`g:snips_author`}
	" Description: ${3}
	${4:" Last Modified: `strftime("%B %d, %Y")`}
snippet guard
	if exists('${1:did_`Filename()`}') || &cp${2: || version < 700}
	    finish
	endif
	let $1 = 1${3}
snippet f
	function! ${1:function_name}(${2})`CommentedFoldMarkerOpen()`
	    ${3}
	endfunction
	
	`CommentedFoldMarkerClose()`
snippet for
	for ${1:needle} in ${2:haystack}
	    ${3:" code}
	endfor
snippet while
	while ${1:condition}
	    ${2:" code}
	endwhile
snippet if
	if ${1:condition}
	    ${2:" code}
	endif
snippet ife
	if ${1:condition}
	    ${2}
	else
	    ${3}
	endif

snippet class A vimscript OOP prototype-based object
	" ${1:classname} prototype " {{{
	function! $1Factory()
	    let s:factory = {}
	    let s:proto = {}

	    " constructor
	    func! s:factory.New() dict
	        let new$1 = copy(s:proto)
	        let new$1.${2:fieldname} = []
	        return new$1
	    endfunc

	    " methods
	    fu! s:proto.set${3:functionName}(${4:argument}) dict
	        call add(self.$2, a:$4)
	    endfu

	    fu! s:proto.get$3() dict
	        return self.$2->get(0)
	    endfu

	    fu! s:proto.${5:yourmethodname}() dict
	        ${6:yourcode}
	    endfu

	    return s:factory
	endfunction

	" $1 }}}

snippet method A vimscript OOP prototype-based object method
	fu! s:${1}.${2:functionName}(${3:argument}) dict
	    ${4:your code here}
	endfu

snippet popm Prototype object public method
	fu! ${1:objectname}.${2:functionname}() dict
	    $3
	endfu

snippet popr Prototype object private method
	fu! ${1:objectname}._${2:functionname}() dict
	    $3
	endfu

snippet s_
	self._${1:private_function}()
snippet s.
	self.${1:function}()
snippet s[
	self['${1:function}']
snippet gl. Get current line
	getline(".")
snippet l. Get current line
	line(".")
snippet com
	command! ${1:commandname} ${2:rhs}
snippet comfun
	" ${1:CommandName}: " {{{
	command! -nargs=${2:01*?+} $1 call $1(<q-args>)
	function! $1(args)
	    ${3}
	endfunction
	
	" }}}
